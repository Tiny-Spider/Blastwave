using System;
using System.Linq;
using System.Collections.Generic;
using UnityEngine;
#if UNITY_EDITOR
using UnityEditor;
#endif
using System.Reflection;

[System.AttributeUsage(System.AttributeTargets.Method)]
public class EditorButton : PropertyAttribute {
}

#if UNITY_EDITOR
[CustomEditor(typeof(MonoBehaviour), true)]
public class EditorButtonEditor : Editor {
    public override void OnInspectorGUI() {
        if (!target)
            return;

        base.OnInspectorGUI();
        
        MonoBehaviour mono = target as MonoBehaviour;

        IEnumerable<MemberInfo> methods = mono.GetType()
            .GetMembers(BindingFlags.Instance | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public |
                        BindingFlags.NonPublic)
            .Where(o => Attribute.IsDefined(o, typeof(EditorButton)));

        foreach (MemberInfo memberInfo in methods) {
            if (GUILayout.Button(memberInfo.Name)) {
                MethodInfo method = memberInfo as MethodInfo;
                method.Invoke(mono, null);
            }
        }
    }
}
#endif